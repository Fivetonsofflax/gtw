#!/bin/bash
set -e

gtw=$(readlink -f ./gtw)

function oneTimeSetUp() {
	tmpdir=$(mktemp -d)
}

function oneTimeTearDown() {
	if [ -n "$tmpdir" ]; then
		rm -rf "$tmpdir"
	fi
}

function setUp() {
	pushd "$tmpdir"
	mkdir repo
	cd repo

	git init
	git commit --allow-empty -m 'Empty repository.'
}

function tearDown() {
	popd
	rm -rf "$tmpdir/repo"
}

function commonAsserts() {
	assertEquals "Main repository tasks sha1 matches taskwarrior repository sha1" $(cat .git/refs/heads/tasks) $(cat .git/task/.git/refs/heads/master)
}

function testFreshRepo() {
	$gtw add test task
	$gtw add second task

	assertEquals "Wrong number of commits in tasks branch" 2 $(git rev-list tasks |wc -l)
	commonAsserts
}

function testRepoWithTasksBranch() {
	$gtw add test task

	rm -rf .git/task/

	$gtw long # should recreate repository

	commonAsserts

	$gtw add another task

	commonAsserts
}

function testRepoWithOriginTasksBranch() {
	$gtw add test task

	git init --bare fakeremote
	git remote add origin ./fakeremote
	git push origin --all
	git fetch origin
	git branch -D tasks
	rm -rf .git/task/

	git show-ref --verify --quiet refs/heads/tasks && fail "local tasks branch must not exist"
	git show-ref --verify --quiet refs/remotes/origin/tasks || fail "remote tasks branch must exist"

	$gtw long # no modification, just report

	commonAsserts

	assertEquals "Remote branch tasks should be ancestor of main tasks branch" $(cat .git/refs/remotes/origin/tasks) $(git merge-base tasks origin/tasks)
}

function testCustomSettings() {
	git config gtw.repository "$tmpdir/repo/tasks"
	git config gtw.branch "taskwarrior"

	$gtw add test task

	[ -d "$tmpdir/repo/tasks" ] || fail "custom repository path must exist"
	[ ! -d ".git/task" ] || fail "regular taskwarrior path must not exist"
	git show-ref --verify --quiet refs/heads/taskwarrior || fail "local taskwarrior branch must exist"

	assertEquals "Main repository taskwarrior sha1 matches taskwarrior repository sha1" $(cat .git/refs/heads/taskwarrior) $(cat tasks/.git/refs/heads/master)
}

. $(which shunit2)
